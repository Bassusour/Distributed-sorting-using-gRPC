// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package protoDistrSorting.distrSort

@SerialVersionUID(0L)
final case class Dataset(
    data: _root_.scala.Seq[protoDistrSorting.distrSort.Data] = _root_.scala.Seq.empty,
    partitionID: _root_.scala.Int = 0,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Dataset] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      data.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      
      {
        val __value = partitionID
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      data.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = partitionID
        if (__v != 0) {
          _output__.writeInt32(2, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def clearData = copy(data = _root_.scala.Seq.empty)
    def addData(__vs: protoDistrSorting.distrSort.Data*): Dataset = addAllData(__vs)
    def addAllData(__vs: Iterable[protoDistrSorting.distrSort.Data]): Dataset = copy(data = data ++ __vs)
    def withData(__v: _root_.scala.Seq[protoDistrSorting.distrSort.Data]): Dataset = copy(data = __v)
    def withPartitionID(__v: _root_.scala.Int): Dataset = copy(partitionID = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => data
        case 2 => {
          val __t = partitionID
          if (__t != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(data.iterator.map(_.toPMessage).toVector)
        case 2 => _root_.scalapb.descriptors.PInt(partitionID)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = protoDistrSorting.distrSort.Dataset
    // @@protoc_insertion_point(GeneratedMessage[protoDistrSorting.Dataset])
}

object Dataset extends scalapb.GeneratedMessageCompanion[protoDistrSorting.distrSort.Dataset] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[protoDistrSorting.distrSort.Dataset] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): protoDistrSorting.distrSort.Dataset = {
    val __data: _root_.scala.collection.immutable.VectorBuilder[protoDistrSorting.distrSort.Data] = new _root_.scala.collection.immutable.VectorBuilder[protoDistrSorting.distrSort.Data]
    var __partitionID: _root_.scala.Int = 0
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __data += _root_.scalapb.LiteParser.readMessage[protoDistrSorting.distrSort.Data](_input__)
        case 16 =>
          __partitionID = _input__.readInt32()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    protoDistrSorting.distrSort.Dataset(
        data = __data.result(),
        partitionID = __partitionID,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[protoDistrSorting.distrSort.Dataset] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      protoDistrSorting.distrSort.Dataset(
        data = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[protoDistrSorting.distrSort.Data]]).getOrElse(_root_.scala.Seq.empty),
        partitionID = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Int]).getOrElse(0)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = DistrSortProto.javaDescriptor.getMessageTypes().get(6)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = DistrSortProto.scalaDescriptor.messages(6)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = protoDistrSorting.distrSort.Data
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = protoDistrSorting.distrSort.Dataset(
    data = _root_.scala.Seq.empty,
    partitionID = 0
  )
  implicit class DatasetLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, protoDistrSorting.distrSort.Dataset]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, protoDistrSorting.distrSort.Dataset](_l) {
    def data: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[protoDistrSorting.distrSort.Data]] = field(_.data)((c_, f_) => c_.copy(data = f_))
    def partitionID: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.partitionID)((c_, f_) => c_.copy(partitionID = f_))
  }
  final val DATA_FIELD_NUMBER = 1
  final val PARTITIONID_FIELD_NUMBER = 2
  def of(
    data: _root_.scala.Seq[protoDistrSorting.distrSort.Data],
    partitionID: _root_.scala.Int
  ): _root_.protoDistrSorting.distrSort.Dataset = _root_.protoDistrSorting.distrSort.Dataset(
    data,
    partitionID
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[protoDistrSorting.Dataset])
}
