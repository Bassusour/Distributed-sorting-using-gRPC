// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package protoSampling.sampling

@SerialVersionUID(0L)
final case class StockQuote(
    price: _root_.scala.Double = 0.0,
    offerNumber: _root_.scala.Int = 0,
    description: _root_.scala.Predef.String = "",
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[StockQuote] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = price
        if (__value != 0.0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(1, __value)
        }
      };
      
      {
        val __value = offerNumber
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, __value)
        }
      };
      
      {
        val __value = description
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = price
        if (__v != 0.0) {
          _output__.writeDouble(1, __v)
        }
      };
      {
        val __v = offerNumber
        if (__v != 0) {
          _output__.writeInt32(2, __v)
        }
      };
      {
        val __v = description
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withPrice(__v: _root_.scala.Double): StockQuote = copy(price = __v)
    def withOfferNumber(__v: _root_.scala.Int): StockQuote = copy(offerNumber = __v)
    def withDescription(__v: _root_.scala.Predef.String): StockQuote = copy(description = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = price
          if (__t != 0.0) __t else null
        }
        case 2 => {
          val __t = offerNumber
          if (__t != 0) __t else null
        }
        case 3 => {
          val __t = description
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PDouble(price)
        case 2 => _root_.scalapb.descriptors.PInt(offerNumber)
        case 3 => _root_.scalapb.descriptors.PString(description)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = protoSampling.sampling.StockQuote
    // @@protoc_insertion_point(GeneratedMessage[protoSampling.StockQuote])
}

object StockQuote extends scalapb.GeneratedMessageCompanion[protoSampling.sampling.StockQuote] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[protoSampling.sampling.StockQuote] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): protoSampling.sampling.StockQuote = {
    var __price: _root_.scala.Double = 0.0
    var __offerNumber: _root_.scala.Int = 0
    var __description: _root_.scala.Predef.String = ""
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 9 =>
          __price = _input__.readDouble()
        case 16 =>
          __offerNumber = _input__.readInt32()
        case 26 =>
          __description = _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    protoSampling.sampling.StockQuote(
        price = __price,
        offerNumber = __offerNumber,
        description = __description,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[protoSampling.sampling.StockQuote] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      protoSampling.sampling.StockQuote(
        price = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Double]).getOrElse(0.0),
        offerNumber = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        description = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SamplingProto.javaDescriptor.getMessageTypes().get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SamplingProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = protoSampling.sampling.StockQuote(
    price = 0.0,
    offerNumber = 0,
    description = ""
  )
  implicit class StockQuoteLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, protoSampling.sampling.StockQuote]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, protoSampling.sampling.StockQuote](_l) {
    def price: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Double] = field(_.price)((c_, f_) => c_.copy(price = f_))
    def offerNumber: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.offerNumber)((c_, f_) => c_.copy(offerNumber = f_))
    def description: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.description)((c_, f_) => c_.copy(description = f_))
  }
  final val PRICE_FIELD_NUMBER = 1
  final val OFFER_NUMBER_FIELD_NUMBER = 2
  final val DESCRIPTION_FIELD_NUMBER = 3
  def of(
    price: _root_.scala.Double,
    offerNumber: _root_.scala.Int,
    description: _root_.scala.Predef.String
  ): _root_.protoSampling.sampling.StockQuote = _root_.protoSampling.sampling.StockQuote(
    price,
    offerNumber,
    description
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[protoSampling.StockQuote])
}
